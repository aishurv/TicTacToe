@page "/game"
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using TicTacToe;
<h3>Tic Tac Toe</h3>

<div class="board">
    @for (int row = 0; row < 3; row++)
    {

        <div class="row">
            @for (int col = 0; col < 3; col++)
            {
                var r = row;
                var c = col;

                <button class="cell" @onclick="(() => MakeMove(r, c))">
                    @board[r, c]
                </button>
            }
        </div>
    }
</div>


<button class="reset" @onclick="ResetGame">Reset Game</button>

<script>
    function showAlert(message) {
        alert(message);
    }
</script>
@code {
    public char[,] board = new char[,] {
        {'O', ' ', ' ',},
        {' ', 'X', ' ',},
        {' ', ' ', 'O',}
    };

    int currentPlayer = 0;  // Keep track of the current player (0 or 1)
    void ResetGame()
    {

        Console.WriteLine("Button clicked !");
        board = new char[3,3] {
            { ' ', ' ', ' ',},
            { ' ', ' ', ' ',},
            { ' ', ' ', ' ',}
    };

    }
    void MakeMove(int row, int col)
    {
        char[] ox = new[] { 'O', 'X' };

        // Only allow move if the cell is empty
        if (board[row, col] == ' ')
        {         
            Console.WriteLine($"row = {row} col = {col}");
            board[row, col] = ox[currentPlayer];
            Console.WriteLine("Move made by player " + (currentPlayer + 1));
            if(isWin())
            {
                Console.WriteLine("Congratulations :) :) :)");
                Console.WriteLine($"Player {currentPlayer + 1} Win the Game !");
                string message = $"Player {currentPlayer + 1} wins the game! Congratulations! :) :) :)";
                JSRuntime.InvokeVoidAsync("showAlert", message);
                ResetGame();
            }
            // Toggle the player after each move
            currentPlayer = 1 - currentPlayer;
            
        }
    }
    private bool isWin()
    {
        if (board[0, 0] != ' ' && board[0, 1] == board[0, 0] && board[0, 1] == board[0, 2])
            return true;
        if (board[1, 0] != ' ' && board[1, 1] == board[1, 0] && board[1, 1] == board[1, 2])
            return true;
        if (board[2, 0] != ' ' && board[2, 1] == board[2, 0] && board[2, 1] == board[2, 2])
            return true;

        if (board[0, 0] != ' ' && board[1, 1] == board[0, 0] && board[0, 0] == board[2, 2])
            return true;
        if (board[0, 2] != ' ' && board[1, 1] == board[0, 2] && board[2, 0] == board[0, 2])
            return true;

        if (board[0, 0] != ' ' && board[0, 0] == board[1, 0] && board[1, 0] == board[2, 0])
            return true;
        if (board[0, 1] != ' ' && board[0, 1] == board[1, 1] && board[1, 1] == board[2, 1])
            return true;
        if (board[0, 2] != ' ' && board[0, 2] == board[1, 2] && board[1, 2] == board[2, 2])
            return true;

        return false;
    }

}

